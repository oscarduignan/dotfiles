/~
	Protobuf 3
~/

[* 

// scope kind
var SCOPE_PROTO		= 0;
var SCOPE_MESSAGE	= 1;
var SCOPE_ENUM		= 2;
var SCOPE_SERVICE	= 3;

var syntax = "proto2";
var scopes = [];

// scope struct
function Scope() {
	var startOffset;
	var endOffset;
	var kind;
}

function addScope(startOffset, endOffset, kind) {
	var scope = new Scope();
	scope.startOffset = startOffset;
	scope.endOffset = endOffset;
	scope.kind = kind;
	scopes.push(scope);
}

*]

/~
	--- These are the token definitions ---
~/

!	' |\r|\n|\t|//[^\n]*\n|/\*.*\*/'

	'syntax'
	'package'
	'import'
	'option'
	'message'
	'oneof'
	'map'
	'reserved'
	'to'
	'enum'
	'service'
	'optional'
	'required'
	'repeated'
	'rpc'
	'returns'
	'true'
	'false'
	'{'													[* %match = %offset *]
	'}'													[* %match = %offset *]
	';'
	','
	'='
	'<'
	'>'
	'\('
	'\)'
	'\['
	'\]'
	'[A-Za-z_][A-Za-z0-9_\.]*'			Identifier		/~ TODO ~/
	'"([^"])*"'							String			[* %match = %match.substr( 1, %match.length - 2 ); *]
	'\-?[0-9]+'							Integer
	'\-?[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'	Float
	;

##

/~
	--- And here's the grammar specification ---
~/

Proto:			Proto TopLevel
				|
				;

TopLevel:		Syntax
				| Package
				| Import
				| Option
				| Message
				| Enum
				| Service
				;

/~ ~~~~~~~~~ syntax ~~~~~~~~~ ~/

Syntax:			syntax '=' String ';'						[* syntax = %3; *]
				;

/~ ~~~~~~~~~ package ~~~~~~~~~ ~/

Package:		package Identifier ';'
				;

/~ ~~~~~~~~~ import ~~~~~~~~~ ~/

Import:			import String ';'
				;

/~ ~~~~~~~~~ option ~~~~~~~~~ ~/

Option:			option Identifier '=' OptionValue ';'
				;

OptionValue:	Identifier
				| String
				| Integer
				| Float
				| true
				| false
				;

/~ ~~~~~~~~~ message ~~~~~~~~~ ~/

Message:		message Identifier '{' MessageBody '}'		[* addScope(%3, %5, SCOPE_MESSAGE) *]
				;

MessageBody:	MessageBody Option
				| MessageBody Field
				| MessageBody Oneof
				| MessageBody Reserved
				| MessageBody Enum
				| MessageBody Message
				|
				;

Field:			FieldRule FieldType FieldName
					'=' Tag FieldOption ';'
				;

FieldRule:		optional	/~ proto2 ~/
				| required	/~ proto2 ~/
				| repeated	/~ proto3 ~/
				|			/~ proto3 ~/
				;

FieldType:		Identifier
				| MapFieldType
				;

MapFieldType:	map '<' Identifier ',' Identifier '>'
				;

FieldName:		Identifier
				;

Tag:			Integer
				;

FieldOption:	'[' Identifier '=' OptionValue ']'
				|
				;

Oneof:			oneof Identifier '{' FieldList '}'
				;

FieldList:		FieldList Field
				| Field
				;

Reserved:		'reserved' ReservedTags ';'
				| 'reserved' ReservedNames ';'
				;

ReservedTags:	ReservedTags ',' ReservedTags
				| Integer
				| Integer 'to' Integer
				;

ReservedNames:	String
				| String ',' String
				;

/~ ~~~~~~~~~ enum ~~~~~~~~~ ~/

Enum:			enum Identifier '{' EnumBody '}'			[* addScope(%3, %5, SCOPE_ENUM) *]
				;

EnumBody:		EnumBody Option
				| EnumBody Const
				|
				;

Const:			ConstName '=' ConstValue ConstOption ';'
				;

ConstName:		Identifier
				;

ConstValue:		Integer
				;

ConstOption:	'[' Identifier '=' OptionValue ']'
				|
				;

/~ ~~~~~~~~~ service ~~~~~~~~~ ~/

Service:		service Identifier '{' ServiceBody '}'		[* addScope(%3, %5, SCOPE_SERVICE) *]
				;

ServiceBody:	ServiceBody Option
				| ServiceBody Method
				|
				;

Method:			rpc MethodName '(' Request ')' 
					returns '(' Response ')' MethodBody
				;

MethodName:		Identifier
				;

Request:		Identifier
				;

Response:		Identifier
				;

MethodBody:		';'
				| '{' OptionList '}'
				;

OptionList:		OptionList Option
				|
				;

[*

var error_offsets = new Array();
var error_lookaheads = new Array();
var error_count = 0;
var str = document.getElementById('code2').value; 
if( ( error_count = __parse( str, error_offsets, error_lookaheads ) ) > 0 ) {
	var errstr = new String();
	for( var i = 0; i < error_count; i++ )
		errstr += "Parse error in line "
		 	+ ( str.substr( 0, error_offsets[i] ).match( /\n/g ) ? str.substr( 0, error_offsets[i] ).match( /\n/g ).length : 1 )
		 	+ " near \""
		 	+ str.substr( error_offsets[i] )
		 	+ "\", expecting \"" + error_lookaheads[i].join() 
		 	+ "\"\n" ; 
	alert( errstr );
}
alert(scopes.length);

*]
